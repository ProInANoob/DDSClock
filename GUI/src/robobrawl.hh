/********************************************
 * DDS type specific header file.           *
 * Autogenerated by CoreDX DDL compiler.    *
 * Do no edit - edits may be overwritten.   *
 ********************************************/

#ifndef _ROBOBRAWL_HH
#define _ROBOBRAWL_HH
#include <dds/dds.hpp>
#include <dds/dds_seq.hh>

#  define  ROBOBRAWL_CPP_DDL_VERSION_MAJOR       6
#  define  ROBOBRAWL_CPP_DDL_VERSION_MINOR       5
#  define  ROBOBRAWL_CPP_DDL_VERSION_PATCH       0
#  define  ROBOBRAWL_CPP_DDL_VERSION_MAJOR_STR  "6"
#  define  ROBOBRAWL_CPP_DDL_VERSION_MINOR_STR  "5"
#  define  ROBOBRAWL_CPP_DDL_VERSION_PATCH_STR  "0"

#include <iostream>
#include <iomanip>
#ifdef _MSC_VER
#  pragma warning(push)
#endif

  enum class DeviceRole  {
  /* enum TypeId: [ C_e1c7ea824f11cf368665b9db6040 :: M_1ad198b120a3909372b1a17071c9 ] */
    ROLE_UNKNOWN = 0, 
    ROLE_CONTROL = 1, 
    ROLE_BUTTON_ORANGE = 2, 
    ROLE_BUTTON_BLUE = 3, 
    ROLE_CLOCK = 4, 
    ROLE_ARENA = 5
  };


  enum class Colors  {
  /* enum TypeId: [ C_f2ca62a29c5759907a748489ff92 :: M_1abc790c86a3c693d201775f80da ] */
    COLOR_GREEN = 0, 
    COLOR_ORANGE = 1, 
    COLOR_BLUE = 2, 
    COLOR_YELLOW = 3, 
    COLOR_RED = 4, 
    COLOR_BLACK = 5
  };

  struct COREDX_TS_STRUCT_EXPORT Heartbeat {
    public:
      Heartbeat();
      ~Heartbeat();
      Heartbeat( const std::string __deviceId,
                 const uint32_t __sequenceNumber ) :
        _deviceId( __deviceId ),
        _sequenceNumber( __sequenceNumber ){ }
      Heartbeat( const Heartbeat & other );
      Heartbeat& operator=( const Heartbeat & other);

      bool operator==( const Heartbeat & other) const;
      bool operator!=( const Heartbeat & other) const { return !operator==(other); }

      /* TypeId: [ C_f56e211b842800a0948d08042a3b :: M_c6d337445831b20a726a3b3bf616 ] */
      void   init();
      void   clear();
      int    copy( const Heartbeat * instance );

      int  marshal_cdr( CDX_XcdrEncoder_t *cdr, int just_keys) const ;
      int  marshal_key_hash( CDX_XcdrEncoder_t * cdr ) const;
      int  unmarshal_cdr( CDX_XcdrDecoder_t * cdr, int just_keys);
      int  unmarshal_key_hash( CDX_XcdrDecoder_t * cdr );
      // deprecated api:
      int  get_marshal_size( int offset, int just_keys ) const;
      int  marshal_cdr( unsigned char * buf, int offset, int stream_len, unsigned char swap, int just_keys) const ;
      int  unmarshal_cdr( unsigned char * buf, int offset, int stream_len, unsigned char swap, int just_keys);

      static void * alloc() { return new Heartbeat; }
      static int    marshal_cdr( const void * instance, CDX_XcdrEncoder_t *cdr, int just_keys) 
                         { return ((Heartbeat*)instance)->marshal_cdr( cdr, just_keys ); }
      static int    marshal_key_hash( const void * instance, CDX_XcdrEncoder_t *cdr) 
                         { return ((Heartbeat*)instance)->marshal_key_hash( cdr ); }
      static int    unmarshal_cdr( void * instance, CDX_XcdrDecoder_t * cdr, int just_keys) 
                         { return ((Heartbeat*)instance)->unmarshal_cdr( cdr, just_keys ); }
      static int    unmarshal_key_hash( void * instance, CDX_XcdrDecoder_t * cdr) 
                         { return ((Heartbeat*)instance)->unmarshal_key_hash( cdr ); }

      static void      gen_typeid_v2 ( unsigned char * buf, int * buf_len );
      static int       gen_typeobj_v2 ( unsigned char * buf, int * buf_len );

      static unsigned char get_field_def(const char  * fieldname, 
                                         CoreDX_FieldDef_t * field_def);
    protected:
      std::string  _deviceId;    /* ID: 0x00000000 */
      uint32_t  _sequenceNumber;    /* ID: 0x00000001 */

    public:
      const std::string & deviceId( ) const { return _deviceId; }
            std::string & deviceId( )       { return _deviceId; }
      void  deviceId( const std::string &  __deviceId ) {  _deviceId = __deviceId; }
      void  deviceId( const std::string && __deviceId ) {  _deviceId = __deviceId; }
            uint32_t   sequenceNumber( ) const { return _sequenceNumber; }
            uint32_t & sequenceNumber( )       { return _sequenceNumber; }
      void sequenceNumber( const uint32_t __sequenceNumber ) { _sequenceNumber = __sequenceNumber; }

      typedef dds::sub::DataReader<Heartbeat>  DataReader;
      typedef dds::pub::DataWriter<Heartbeat>  DataWriter;

    private:

  }; //Heartbeat
  typedef dds::sub::DataReader<Heartbeat>  HeartbeatDataReader;
  typedef dds::pub::DataWriter<Heartbeat>  HeartbeatDataWriter;

  struct COREDX_TS_STRUCT_EXPORT SysName {
    public:
      SysName();
      ~SysName();
      SysName( const std::string __deviceId,
               const std::string __sysName ) :
        _deviceId( __deviceId ),
        _sysName( __sysName ){ }
      SysName( const SysName & other );
      SysName& operator=( const SysName & other);

      bool operator==( const SysName & other) const;
      bool operator!=( const SysName & other) const { return !operator==(other); }

      /* TypeId: [ C_e0ebc1a8e33f07b6696caeead4ca :: M_2217bcd38d15a47dd904139f51d4 ] */
      void   init();
      void   clear();
      int    copy( const SysName * instance );

      int  marshal_cdr( CDX_XcdrEncoder_t *cdr, int just_keys) const ;
      int  marshal_key_hash( CDX_XcdrEncoder_t * cdr ) const;
      int  unmarshal_cdr( CDX_XcdrDecoder_t * cdr, int just_keys);
      int  unmarshal_key_hash( CDX_XcdrDecoder_t * cdr );
      // deprecated api:
      int  get_marshal_size( int offset, int just_keys ) const;
      int  marshal_cdr( unsigned char * buf, int offset, int stream_len, unsigned char swap, int just_keys) const ;
      int  unmarshal_cdr( unsigned char * buf, int offset, int stream_len, unsigned char swap, int just_keys);

      static void * alloc() { return new SysName; }
      static int    marshal_cdr( const void * instance, CDX_XcdrEncoder_t *cdr, int just_keys) 
                         { return ((SysName*)instance)->marshal_cdr( cdr, just_keys ); }
      static int    marshal_key_hash( const void * instance, CDX_XcdrEncoder_t *cdr) 
                         { return ((SysName*)instance)->marshal_key_hash( cdr ); }
      static int    unmarshal_cdr( void * instance, CDX_XcdrDecoder_t * cdr, int just_keys) 
                         { return ((SysName*)instance)->unmarshal_cdr( cdr, just_keys ); }
      static int    unmarshal_key_hash( void * instance, CDX_XcdrDecoder_t * cdr) 
                         { return ((SysName*)instance)->unmarshal_key_hash( cdr ); }

      static void      gen_typeid_v2 ( unsigned char * buf, int * buf_len );
      static int       gen_typeobj_v2 ( unsigned char * buf, int * buf_len );

      static unsigned char get_field_def(const char  * fieldname, 
                                         CoreDX_FieldDef_t * field_def);
    protected:
      std::string  _deviceId;    /* ID: 0x00000000 */
      std::string  _sysName;    /* ID: 0x00000001 */

    public:
      const std::string & deviceId( ) const { return _deviceId; }
            std::string & deviceId( )       { return _deviceId; }
      void  deviceId( const std::string &  __deviceId ) {  _deviceId = __deviceId; }
      void  deviceId( const std::string && __deviceId ) {  _deviceId = __deviceId; }
      const std::string & sysName( ) const { return _sysName; }
            std::string & sysName( )       { return _sysName; }
      void  sysName( const std::string &  __sysName ) {  _sysName = __sysName; }
      void  sysName( const std::string && __sysName ) {  _sysName = __sysName; }

      typedef dds::sub::DataReader<SysName>  DataReader;
      typedef dds::pub::DataWriter<SysName>  DataWriter;

    private:

  }; //SysName
  typedef dds::sub::DataReader<SysName>  SysNameDataReader;
  typedef dds::pub::DataWriter<SysName>  SysNameDataWriter;

  struct COREDX_TS_STRUCT_EXPORT timeValue {
    public:
      timeValue();
      ~timeValue();
      timeValue( const float __seconds,
                 const int32_t __minutes ) :
        _seconds( __seconds ),
        _minutes( __minutes ){ }
      timeValue( const timeValue & other );
      timeValue& operator=( const timeValue & other);

      bool operator==( const timeValue & other) const;
      bool operator!=( const timeValue & other) const { return !operator==(other); }

      /* TypeId: [ C_74b839bb67a88cbe77fb8cc6f489 :: M_9ec447257ae11e3df79a68e12fc6 ] */
      void   init();
      void   clear();
      int    copy( const timeValue * instance );

      int  marshal_cdr( CDX_XcdrEncoder_t *cdr, int just_keys) const ;
      int  marshal_key_hash( CDX_XcdrEncoder_t * cdr ) const;
      int  unmarshal_cdr( CDX_XcdrDecoder_t * cdr, int just_keys);
      int  unmarshal_key_hash( CDX_XcdrDecoder_t * cdr );
      // deprecated api:
      int  get_marshal_size( int offset, int just_keys ) const;
      int  marshal_cdr( unsigned char * buf, int offset, int stream_len, unsigned char swap, int just_keys) const ;
      int  unmarshal_cdr( unsigned char * buf, int offset, int stream_len, unsigned char swap, int just_keys);

      static void * alloc() { return new timeValue; }
      static int    marshal_cdr( const void * instance, CDX_XcdrEncoder_t *cdr, int just_keys) 
                         { return ((timeValue*)instance)->marshal_cdr( cdr, just_keys ); }
      static int    marshal_key_hash( const void * instance, CDX_XcdrEncoder_t *cdr) 
                         { return ((timeValue*)instance)->marshal_key_hash( cdr ); }
      static int    unmarshal_cdr( void * instance, CDX_XcdrDecoder_t * cdr, int just_keys) 
                         { return ((timeValue*)instance)->unmarshal_cdr( cdr, just_keys ); }
      static int    unmarshal_key_hash( void * instance, CDX_XcdrDecoder_t * cdr) 
                         { return ((timeValue*)instance)->unmarshal_key_hash( cdr ); }

      static void      gen_typeid_v2 ( unsigned char * buf, int * buf_len );
      static int       gen_typeobj_v2 ( unsigned char * buf, int * buf_len );

      static unsigned char get_field_def(const char  * fieldname, 
                                         CoreDX_FieldDef_t * field_def);
    protected:
      float  _seconds;    /* ID: 0x00000000 */
      int32_t  _minutes;    /* ID: 0x00000001 */

    public:
            float   seconds( ) const { return _seconds; }
            float & seconds( )       { return _seconds; }
      void seconds( const float __seconds ) { _seconds = __seconds; }
            int32_t   minutes( ) const { return _minutes; }
            int32_t & minutes( )       { return _minutes; }
      void minutes( const int32_t __minutes ) { _minutes = __minutes; }

      typedef dds::sub::DataReader<timeValue>  DataReader;
      typedef dds::pub::DataWriter<timeValue>  DataWriter;

    private:

  }; //timeValue
  typedef dds::sub::DataReader<timeValue>  timeValueDataReader;
  typedef dds::pub::DataWriter<timeValue>  timeValueDataWriter;

  struct COREDX_TS_STRUCT_EXPORT ClockCommand {
    public:
      ClockCommand();
      ~ClockCommand();
      ClockCommand( const std::string __sysName,
                    const int32_t __isOff,
                    const int32_t __doDisplayTime,
                    const struct timeValue __time,
                    const Colors __mainColor,
                    const Colors __blueGearColor,
                    const Colors __orangeGearColor ) :
        _sysName( __sysName ),
        _isOff( __isOff ),
        _doDisplayTime( __doDisplayTime ),
        _time( __time ),
        _mainColor( __mainColor ),
        _blueGearColor( __blueGearColor ),
        _orangeGearColor( __orangeGearColor ){ }
      ClockCommand( const ClockCommand & other );
      ClockCommand& operator=( const ClockCommand & other);

      bool operator==( const ClockCommand & other) const;
      bool operator!=( const ClockCommand & other) const { return !operator==(other); }

      /* TypeId: [ C_20dc8b0c06163b3ac097fa119771 :: M_cbcf44a7700751fe7143defbaa11 ] */
      void   init();
      void   clear();
      int    copy( const ClockCommand * instance );

      int  marshal_cdr( CDX_XcdrEncoder_t *cdr, int just_keys) const ;
      int  marshal_key_hash( CDX_XcdrEncoder_t * cdr ) const;
      int  unmarshal_cdr( CDX_XcdrDecoder_t * cdr, int just_keys);
      int  unmarshal_key_hash( CDX_XcdrDecoder_t * cdr );
      // deprecated api:
      int  get_marshal_size( int offset, int just_keys ) const;
      int  marshal_cdr( unsigned char * buf, int offset, int stream_len, unsigned char swap, int just_keys) const ;
      int  unmarshal_cdr( unsigned char * buf, int offset, int stream_len, unsigned char swap, int just_keys);

      static void * alloc() { return new ClockCommand; }
      static int    marshal_cdr( const void * instance, CDX_XcdrEncoder_t *cdr, int just_keys) 
                         { return ((ClockCommand*)instance)->marshal_cdr( cdr, just_keys ); }
      static int    marshal_key_hash( const void * instance, CDX_XcdrEncoder_t *cdr) 
                         { return ((ClockCommand*)instance)->marshal_key_hash( cdr ); }
      static int    unmarshal_cdr( void * instance, CDX_XcdrDecoder_t * cdr, int just_keys) 
                         { return ((ClockCommand*)instance)->unmarshal_cdr( cdr, just_keys ); }
      static int    unmarshal_key_hash( void * instance, CDX_XcdrDecoder_t * cdr) 
                         { return ((ClockCommand*)instance)->unmarshal_key_hash( cdr ); }

      static void      gen_typeid_v2 ( unsigned char * buf, int * buf_len );
      static int       gen_typeobj_v2 ( unsigned char * buf, int * buf_len );

      static unsigned char get_field_def(const char  * fieldname, 
                                         CoreDX_FieldDef_t * field_def);
    protected:
      std::string  _sysName;    /* ID: 0x00000000 */
      int32_t  _isOff;    /* ID: 0x00000001 */
      int32_t  _doDisplayTime;    /* ID: 0x00000002 */
      struct timeValue  _time;    /* ID: 0x00000003 */
      Colors  _mainColor;    /* ID: 0x00000004 */
      Colors  _blueGearColor;    /* ID: 0x00000005 */
      Colors  _orangeGearColor;    /* ID: 0x00000006 */

    public:
      const std::string & sysName( ) const { return _sysName; }
            std::string & sysName( )       { return _sysName; }
      void  sysName( const std::string &  __sysName ) {  _sysName = __sysName; }
      void  sysName( const std::string && __sysName ) {  _sysName = __sysName; }
            int32_t   isOff( ) const { return _isOff; }
            int32_t & isOff( )       { return _isOff; }
      void isOff( const int32_t __isOff ) { _isOff = __isOff; }
            int32_t   doDisplayTime( ) const { return _doDisplayTime; }
            int32_t & doDisplayTime( )       { return _doDisplayTime; }
      void doDisplayTime( const int32_t __doDisplayTime ) { _doDisplayTime = __doDisplayTime; }
      const struct timeValue & time( ) const { return _time; }
            struct timeValue & time( )       { return _time; }
      void  time( const struct timeValue &  __time ) {  _time = __time; }
      void  time( const struct timeValue && __time ) {  _time = __time; }
            Colors   mainColor( ) const { return _mainColor; }
            Colors & mainColor( )       { return _mainColor; }
      void mainColor( const Colors __mainColor ) { _mainColor = __mainColor; }
            Colors   blueGearColor( ) const { return _blueGearColor; }
            Colors & blueGearColor( )       { return _blueGearColor; }
      void blueGearColor( const Colors __blueGearColor ) { _blueGearColor = __blueGearColor; }
            Colors   orangeGearColor( ) const { return _orangeGearColor; }
            Colors & orangeGearColor( )       { return _orangeGearColor; }
      void orangeGearColor( const Colors __orangeGearColor ) { _orangeGearColor = __orangeGearColor; }

      typedef dds::sub::DataReader<ClockCommand>  DataReader;
      typedef dds::pub::DataWriter<ClockCommand>  DataWriter;

    private:

  }; //ClockCommand
  typedef dds::sub::DataReader<ClockCommand>  ClockCommandDataReader;
  typedef dds::pub::DataWriter<ClockCommand>  ClockCommandDataWriter;

  struct COREDX_TS_STRUCT_EXPORT ButtonCommand {
    public:
      ButtonCommand();
      ~ButtonCommand();
      ButtonCommand( const std::string __deviceId,
                     const Colors __buttonState ) :
        _deviceId( __deviceId ),
        _buttonState( __buttonState ){ }
      ButtonCommand( const ButtonCommand & other );
      ButtonCommand& operator=( const ButtonCommand & other);

      bool operator==( const ButtonCommand & other) const;
      bool operator!=( const ButtonCommand & other) const { return !operator==(other); }

      /* TypeId: [ C_08bd40230ed12e181cb39422b193 :: M_93e319762fae198b5c99b1ba9a95 ] */
      void   init();
      void   clear();
      int    copy( const ButtonCommand * instance );

      int  marshal_cdr( CDX_XcdrEncoder_t *cdr, int just_keys) const ;
      int  marshal_key_hash( CDX_XcdrEncoder_t * cdr ) const;
      int  unmarshal_cdr( CDX_XcdrDecoder_t * cdr, int just_keys);
      int  unmarshal_key_hash( CDX_XcdrDecoder_t * cdr );
      // deprecated api:
      int  get_marshal_size( int offset, int just_keys ) const;
      int  marshal_cdr( unsigned char * buf, int offset, int stream_len, unsigned char swap, int just_keys) const ;
      int  unmarshal_cdr( unsigned char * buf, int offset, int stream_len, unsigned char swap, int just_keys);

      static void * alloc() { return new ButtonCommand; }
      static int    marshal_cdr( const void * instance, CDX_XcdrEncoder_t *cdr, int just_keys) 
                         { return ((ButtonCommand*)instance)->marshal_cdr( cdr, just_keys ); }
      static int    marshal_key_hash( const void * instance, CDX_XcdrEncoder_t *cdr) 
                         { return ((ButtonCommand*)instance)->marshal_key_hash( cdr ); }
      static int    unmarshal_cdr( void * instance, CDX_XcdrDecoder_t * cdr, int just_keys) 
                         { return ((ButtonCommand*)instance)->unmarshal_cdr( cdr, just_keys ); }
      static int    unmarshal_key_hash( void * instance, CDX_XcdrDecoder_t * cdr) 
                         { return ((ButtonCommand*)instance)->unmarshal_key_hash( cdr ); }

      static void      gen_typeid_v2 ( unsigned char * buf, int * buf_len );
      static int       gen_typeobj_v2 ( unsigned char * buf, int * buf_len );

      static unsigned char get_field_def(const char  * fieldname, 
                                         CoreDX_FieldDef_t * field_def);
    protected:
      std::string  _deviceId;    /* ID: 0x00000000 */
      Colors  _buttonState;    /* ID: 0x00000001 */

    public:
      const std::string & deviceId( ) const { return _deviceId; }
            std::string & deviceId( )       { return _deviceId; }
      void  deviceId( const std::string &  __deviceId ) {  _deviceId = __deviceId; }
      void  deviceId( const std::string && __deviceId ) {  _deviceId = __deviceId; }
            Colors   buttonState( ) const { return _buttonState; }
            Colors & buttonState( )       { return _buttonState; }
      void buttonState( const Colors __buttonState ) { _buttonState = __buttonState; }

      typedef dds::sub::DataReader<ButtonCommand>  DataReader;
      typedef dds::pub::DataWriter<ButtonCommand>  DataWriter;

    private:

  }; //ButtonCommand
  typedef dds::sub::DataReader<ButtonCommand>  ButtonCommandDataReader;
  typedef dds::pub::DataWriter<ButtonCommand>  ButtonCommandDataWriter;

  struct COREDX_TS_STRUCT_EXPORT ButtonData {
    public:
      ButtonData();
      ~ButtonData();
      ButtonData( const std::string __deviceId,
                  const std::string __sysName,
                  const int32_t __mainPressed,
                  const int32_t __tapoutPressed ) :
        _deviceId( __deviceId ),
        _sysName( __sysName ),
        _mainPressed( __mainPressed ),
        _tapoutPressed( __tapoutPressed ){ }
      ButtonData( const ButtonData & other );
      ButtonData& operator=( const ButtonData & other);

      bool operator==( const ButtonData & other) const;
      bool operator!=( const ButtonData & other) const { return !operator==(other); }

      /* TypeId: [ C_062188343c9f1f36733b2b58b018 :: M_3ba1602886c6847fc221bcf1189a ] */
      void   init();
      void   clear();
      int    copy( const ButtonData * instance );

      int  marshal_cdr( CDX_XcdrEncoder_t *cdr, int just_keys) const ;
      int  marshal_key_hash( CDX_XcdrEncoder_t * cdr ) const;
      int  unmarshal_cdr( CDX_XcdrDecoder_t * cdr, int just_keys);
      int  unmarshal_key_hash( CDX_XcdrDecoder_t * cdr );
      // deprecated api:
      int  get_marshal_size( int offset, int just_keys ) const;
      int  marshal_cdr( unsigned char * buf, int offset, int stream_len, unsigned char swap, int just_keys) const ;
      int  unmarshal_cdr( unsigned char * buf, int offset, int stream_len, unsigned char swap, int just_keys);

      static void * alloc() { return new ButtonData; }
      static int    marshal_cdr( const void * instance, CDX_XcdrEncoder_t *cdr, int just_keys) 
                         { return ((ButtonData*)instance)->marshal_cdr( cdr, just_keys ); }
      static int    marshal_key_hash( const void * instance, CDX_XcdrEncoder_t *cdr) 
                         { return ((ButtonData*)instance)->marshal_key_hash( cdr ); }
      static int    unmarshal_cdr( void * instance, CDX_XcdrDecoder_t * cdr, int just_keys) 
                         { return ((ButtonData*)instance)->unmarshal_cdr( cdr, just_keys ); }
      static int    unmarshal_key_hash( void * instance, CDX_XcdrDecoder_t * cdr) 
                         { return ((ButtonData*)instance)->unmarshal_key_hash( cdr ); }

      static void      gen_typeid_v2 ( unsigned char * buf, int * buf_len );
      static int       gen_typeobj_v2 ( unsigned char * buf, int * buf_len );

      static unsigned char get_field_def(const char  * fieldname, 
                                         CoreDX_FieldDef_t * field_def);
    protected:
      std::string  _deviceId;    /* ID: 0x00000000 */
      std::string  _sysName;    /* ID: 0x00000001 */
      int32_t  _mainPressed;    /* ID: 0x00000002 */
      int32_t  _tapoutPressed;    /* ID: 0x00000003 */

    public:
      const std::string & deviceId( ) const { return _deviceId; }
            std::string & deviceId( )       { return _deviceId; }
      void  deviceId( const std::string &  __deviceId ) {  _deviceId = __deviceId; }
      void  deviceId( const std::string && __deviceId ) {  _deviceId = __deviceId; }
      const std::string & sysName( ) const { return _sysName; }
            std::string & sysName( )       { return _sysName; }
      void  sysName( const std::string &  __sysName ) {  _sysName = __sysName; }
      void  sysName( const std::string && __sysName ) {  _sysName = __sysName; }
            int32_t   mainPressed( ) const { return _mainPressed; }
            int32_t & mainPressed( )       { return _mainPressed; }
      void mainPressed( const int32_t __mainPressed ) { _mainPressed = __mainPressed; }
            int32_t   tapoutPressed( ) const { return _tapoutPressed; }
            int32_t & tapoutPressed( )       { return _tapoutPressed; }
      void tapoutPressed( const int32_t __tapoutPressed ) { _tapoutPressed = __tapoutPressed; }

      typedef dds::sub::DataReader<ButtonData>  DataReader;
      typedef dds::pub::DataWriter<ButtonData>  DataWriter;

    private:

  }; //ButtonData
  typedef dds::sub::DataReader<ButtonData>  ButtonDataDataReader;
  typedef dds::pub::DataWriter<ButtonData>  ButtonDataDataWriter;

  struct COREDX_TS_STRUCT_EXPORT ArenaData {
    public:
      ArenaData();
      ~ArenaData();
      ArenaData( const std::string __deviceId,
                 const std::string __sysName,
                 const Colors __color ) :
        _deviceId( __deviceId ),
        _sysName( __sysName ),
        _color( __color ){ }
      ArenaData( const ArenaData & other );
      ArenaData& operator=( const ArenaData & other);

      bool operator==( const ArenaData & other) const;
      bool operator!=( const ArenaData & other) const { return !operator==(other); }

      /* TypeId: [ C_fbf78170811ee39e40808dd0a62b :: M_22ab1636961487bb07e44f119595 ] */
      void   init();
      void   clear();
      int    copy( const ArenaData * instance );

      int  marshal_cdr( CDX_XcdrEncoder_t *cdr, int just_keys) const ;
      int  marshal_key_hash( CDX_XcdrEncoder_t * cdr ) const;
      int  unmarshal_cdr( CDX_XcdrDecoder_t * cdr, int just_keys);
      int  unmarshal_key_hash( CDX_XcdrDecoder_t * cdr );
      // deprecated api:
      int  get_marshal_size( int offset, int just_keys ) const;
      int  marshal_cdr( unsigned char * buf, int offset, int stream_len, unsigned char swap, int just_keys) const ;
      int  unmarshal_cdr( unsigned char * buf, int offset, int stream_len, unsigned char swap, int just_keys);

      static void * alloc() { return new ArenaData; }
      static int    marshal_cdr( const void * instance, CDX_XcdrEncoder_t *cdr, int just_keys) 
                         { return ((ArenaData*)instance)->marshal_cdr( cdr, just_keys ); }
      static int    marshal_key_hash( const void * instance, CDX_XcdrEncoder_t *cdr) 
                         { return ((ArenaData*)instance)->marshal_key_hash( cdr ); }
      static int    unmarshal_cdr( void * instance, CDX_XcdrDecoder_t * cdr, int just_keys) 
                         { return ((ArenaData*)instance)->unmarshal_cdr( cdr, just_keys ); }
      static int    unmarshal_key_hash( void * instance, CDX_XcdrDecoder_t * cdr) 
                         { return ((ArenaData*)instance)->unmarshal_key_hash( cdr ); }

      static void      gen_typeid_v2 ( unsigned char * buf, int * buf_len );
      static int       gen_typeobj_v2 ( unsigned char * buf, int * buf_len );

      static unsigned char get_field_def(const char  * fieldname, 
                                         CoreDX_FieldDef_t * field_def);
    protected:
      std::string  _deviceId;    /* ID: 0x00000000 */
      std::string  _sysName;    /* ID: 0x00000001 */
      Colors  _color;    /* ID: 0x00000002 */

    public:
      const std::string & deviceId( ) const { return _deviceId; }
            std::string & deviceId( )       { return _deviceId; }
      void  deviceId( const std::string &  __deviceId ) {  _deviceId = __deviceId; }
      void  deviceId( const std::string && __deviceId ) {  _deviceId = __deviceId; }
      const std::string & sysName( ) const { return _sysName; }
            std::string & sysName( )       { return _sysName; }
      void  sysName( const std::string &  __sysName ) {  _sysName = __sysName; }
      void  sysName( const std::string && __sysName ) {  _sysName = __sysName; }
            Colors   color( ) const { return _color; }
            Colors & color( )       { return _color; }
      void color( const Colors __color ) { _color = __color; }

      typedef dds::sub::DataReader<ArenaData>  DataReader;
      typedef dds::pub::DataWriter<ArenaData>  DataWriter;

    private:

  }; //ArenaData
  typedef dds::sub::DataReader<ArenaData>  ArenaDataDataReader;
  typedef dds::pub::DataWriter<ArenaData>  ArenaDataDataWriter;

  struct COREDX_TS_STRUCT_EXPORT DeviceInfo {
    public:
      DeviceInfo();
      ~DeviceInfo();
      DeviceInfo( const std::string __deviceId,
                  const DeviceRole __role,
                  const std::string __sysName,
                  const std::string __displayName ) :
        _deviceId( __deviceId ),
        _role( __role ),
        _sysName( __sysName ),
        _displayName( __displayName ){ }
      DeviceInfo( const DeviceInfo & other );
      DeviceInfo& operator=( const DeviceInfo & other);

      bool operator==( const DeviceInfo & other) const;
      bool operator!=( const DeviceInfo & other) const { return !operator==(other); }

      /* TypeId: [ C_4a6e18ad6ef96d6df999e8bfc6ec :: M_ba17860f85601d1652a16e21602c ] */
      void   init();
      void   clear();
      int    copy( const DeviceInfo * instance );

      int  marshal_cdr( CDX_XcdrEncoder_t *cdr, int just_keys) const ;
      int  marshal_key_hash( CDX_XcdrEncoder_t * cdr ) const;
      int  unmarshal_cdr( CDX_XcdrDecoder_t * cdr, int just_keys);
      int  unmarshal_key_hash( CDX_XcdrDecoder_t * cdr );
      // deprecated api:
      int  get_marshal_size( int offset, int just_keys ) const;
      int  marshal_cdr( unsigned char * buf, int offset, int stream_len, unsigned char swap, int just_keys) const ;
      int  unmarshal_cdr( unsigned char * buf, int offset, int stream_len, unsigned char swap, int just_keys);

      static void * alloc() { return new DeviceInfo; }
      static int    marshal_cdr( const void * instance, CDX_XcdrEncoder_t *cdr, int just_keys) 
                         { return ((DeviceInfo*)instance)->marshal_cdr( cdr, just_keys ); }
      static int    marshal_key_hash( const void * instance, CDX_XcdrEncoder_t *cdr) 
                         { return ((DeviceInfo*)instance)->marshal_key_hash( cdr ); }
      static int    unmarshal_cdr( void * instance, CDX_XcdrDecoder_t * cdr, int just_keys) 
                         { return ((DeviceInfo*)instance)->unmarshal_cdr( cdr, just_keys ); }
      static int    unmarshal_key_hash( void * instance, CDX_XcdrDecoder_t * cdr) 
                         { return ((DeviceInfo*)instance)->unmarshal_key_hash( cdr ); }

      static void      gen_typeid_v2 ( unsigned char * buf, int * buf_len );
      static int       gen_typeobj_v2 ( unsigned char * buf, int * buf_len );

      static unsigned char get_field_def(const char  * fieldname, 
                                         CoreDX_FieldDef_t * field_def);
    protected:
      std::string  _deviceId;    /* ID: 0x00000000 */    /* key */
      DeviceRole  _role;    /* ID: 0x00000001 */
      std::string  _sysName;    /* ID: 0x00000002 */
      std::string  _displayName;    /* ID: 0x00000003 */

    public:
      const std::string & deviceId( ) const { return _deviceId; }
            std::string & deviceId( )       { return _deviceId; }
      void  deviceId( const std::string &  __deviceId ) {  _deviceId = __deviceId; }
      void  deviceId( const std::string && __deviceId ) {  _deviceId = __deviceId; }
            DeviceRole   role( ) const { return _role; }
            DeviceRole & role( )       { return _role; }
      void role( const DeviceRole __role ) { _role = __role; }
      const std::string & sysName( ) const { return _sysName; }
            std::string & sysName( )       { return _sysName; }
      void  sysName( const std::string &  __sysName ) {  _sysName = __sysName; }
      void  sysName( const std::string && __sysName ) {  _sysName = __sysName; }
      const std::string & displayName( ) const { return _displayName; }
            std::string & displayName( )       { return _displayName; }
      void  displayName( const std::string &  __displayName ) {  _displayName = __displayName; }
      void  displayName( const std::string && __displayName ) {  _displayName = __displayName; }

      typedef dds::sub::DataReader<DeviceInfo>  DataReader;
      typedef dds::pub::DataWriter<DeviceInfo>  DataWriter;

    private:

  }; //DeviceInfo
  typedef dds::sub::DataReader<DeviceInfo>  DeviceInfoDataReader;
  typedef dds::pub::DataWriter<DeviceInfo>  DeviceInfoDataWriter;


#include <dds/topic/TopicTraits.hpp>
#include <org/toc/coredx/topic/TopicTraits.hpp>
inline std::ostream & operator<< (std::ostream &out, DeviceRole const& data ) {
  (void)data;
  switch(data) { 
    case DeviceRole::ROLE_UNKNOWN: out <<"ROLE_UNKNOWN"; break;
    case DeviceRole::ROLE_CONTROL: out <<"ROLE_CONTROL"; break;
    case DeviceRole::ROLE_BUTTON_ORANGE: out <<"ROLE_BUTTON_ORANGE"; break;
    case DeviceRole::ROLE_BUTTON_BLUE: out <<"ROLE_BUTTON_BLUE"; break;
    case DeviceRole::ROLE_CLOCK: out <<"ROLE_CLOCK"; break;
    case DeviceRole::ROLE_ARENA: out <<"ROLE_ARENA"; break;
    default: out << static_cast<int32_t>(data);
  }
  return out;
}
inline std::ostream & operator<< (std::ostream &out, Colors const& data ) {
  (void)data;
  switch(data) { 
    case Colors::COLOR_GREEN: out <<"COLOR_GREEN"; break;
    case Colors::COLOR_ORANGE: out <<"COLOR_ORANGE"; break;
    case Colors::COLOR_BLUE: out <<"COLOR_BLUE"; break;
    case Colors::COLOR_YELLOW: out <<"COLOR_YELLOW"; break;
    case Colors::COLOR_RED: out <<"COLOR_RED"; break;
    case Colors::COLOR_BLACK: out <<"COLOR_BLACK"; break;
    default: out << static_cast<int32_t>(data);
  }
  return out;
}
inline std::ostream & operator<< (std::ostream &out, Heartbeat const& data ) {
  (void)data;
  out << "deviceId: ";
  out << "\"" << data.deviceId() << "\"";
  out << std::endl;
  out << "sequenceNumber: ";
  out <<  data.sequenceNumber();
  out << std::endl;
  return out;
}
// Heartbeat support 
CDX_TOPIC_TRAITS( Heartbeat );
REGISTER_TOPIC_TYPE( Heartbeat );

inline std::ostream & operator<< (std::ostream &out, SysName const& data ) {
  (void)data;
  out << "deviceId: ";
  out << "\"" << data.deviceId() << "\"";
  out << std::endl;
  out << "sysName: ";
  out << "\"" << data.sysName() << "\"";
  out << std::endl;
  return out;
}
// SysName support 
CDX_TOPIC_TRAITS( SysName );
REGISTER_TOPIC_TYPE( SysName );

inline std::ostream & operator<< (std::ostream &out, timeValue const& data ) {
  (void)data;
  out << "seconds: ";
  out <<  data.seconds();
  out << std::endl;
  out << "minutes: ";
  out <<  data.minutes();
  out << std::endl;
  return out;
}
// timeValue support 
CDX_TOPIC_TRAITS( timeValue );
REGISTER_TOPIC_TYPE( timeValue );

inline std::ostream & operator<< (std::ostream &out, ClockCommand const& data ) {
  (void)data;
  out << "sysName: ";
  out << "\"" << data.sysName() << "\"";
  out << std::endl;
  out << "isOff: ";
  out <<  data.isOff();
  out << std::endl;
  out << "doDisplayTime: ";
  out <<  data.doDisplayTime();
  out << std::endl;
  out << "time: ";
  out << std::endl << "/----------------------------" << std::endl;
  out << data.time();
  out << "\\----------------------------" << std::endl;
  out << std::endl;
  out << "mainColor: ";
  out <<  data.mainColor();
  out << std::endl;
  out << "blueGearColor: ";
  out <<  data.blueGearColor();
  out << std::endl;
  out << "orangeGearColor: ";
  out <<  data.orangeGearColor();
  out << std::endl;
  return out;
}
// ClockCommand support 
CDX_TOPIC_TRAITS( ClockCommand );
REGISTER_TOPIC_TYPE( ClockCommand );

inline std::ostream & operator<< (std::ostream &out, ButtonCommand const& data ) {
  (void)data;
  out << "deviceId: ";
  out << "\"" << data.deviceId() << "\"";
  out << std::endl;
  out << "buttonState: ";
  out <<  data.buttonState();
  out << std::endl;
  return out;
}
// ButtonCommand support 
CDX_TOPIC_TRAITS( ButtonCommand );
REGISTER_TOPIC_TYPE( ButtonCommand );

inline std::ostream & operator<< (std::ostream &out, ButtonData const& data ) {
  (void)data;
  out << "deviceId: ";
  out << "\"" << data.deviceId() << "\"";
  out << std::endl;
  out << "sysName: ";
  out << "\"" << data.sysName() << "\"";
  out << std::endl;
  out << "mainPressed: ";
  out <<  data.mainPressed();
  out << std::endl;
  out << "tapoutPressed: ";
  out <<  data.tapoutPressed();
  out << std::endl;
  return out;
}
// ButtonData support 
CDX_TOPIC_TRAITS( ButtonData );
REGISTER_TOPIC_TYPE( ButtonData );

inline std::ostream & operator<< (std::ostream &out, ArenaData const& data ) {
  (void)data;
  out << "deviceId: ";
  out << "\"" << data.deviceId() << "\"";
  out << std::endl;
  out << "sysName: ";
  out << "\"" << data.sysName() << "\"";
  out << std::endl;
  out << "color: ";
  out <<  data.color();
  out << std::endl;
  return out;
}
// ArenaData support 
CDX_TOPIC_TRAITS( ArenaData );
REGISTER_TOPIC_TYPE( ArenaData );

inline std::ostream & operator<< (std::ostream &out, DeviceInfo const& data ) {
  (void)data;
  out << "deviceId: ";
  out << "\"" << data.deviceId() << "\"";
  out << std::endl;
  out << "role: ";
  out <<  data.role();
  out << std::endl;
  out << "sysName: ";
  out << "\"" << data.sysName() << "\"";
  out << std::endl;
  out << "displayName: ";
  out << "\"" << data.displayName() << "\"";
  out << std::endl;
  return out;
}
// DeviceInfo support 
CDX_TOPIC_TRAITS( DeviceInfo );
REGISTER_TOPIC_TYPE( DeviceInfo );


#ifdef _MSC_VER
#  pragma warning(pop)
#endif
#endif
