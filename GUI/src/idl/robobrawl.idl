//aight


enum DeviceRole {
       ROLE_UNKNOWN, // Unknown value. This is a generic placeholder representing the case in which an appropriate value could not be determined.  Never transmitted in this version of the standard.
       ROLE_CONTROL, 
       ROLE_BUTTON_ORANGE,
       ROLE_BUTTON_BLUE,
       ROLE_CLOCK, 
       ROLE_ARENA,
       
   }; // enum DeviceRole


enum Colors{
    COLOR_GREEN,
    COLOR_ORANGE,
    COLOR_BLUE,
    COLOR_YELLOW,
    COLOR_RED,
    COLOR_BLACK, // off
    COLOR_WHITE,
};

enum ArenaState{ // im gona use these as state numbers,,, so just like fade blue on, fade orange on, fadeorangeandblue on or somehting..... 
// ahhhh have the pi run some cored subroutines for each of these things that changes the map of vaalues (4 x 4), and ense state out ever so ocy6j7ften .
    ARENA_STATIC,
    ARENA_OFF,
    ARENA_WHITE,
    ARENA_ORANGE_READYS,
    ARENA_BLUE_READYS,
    ARENA_ORANGE_WIN,
    ARENA_BLUE_WIN,
    ARENA_321,
    ARENA_IN_MATCH,
    ARENA_TIME_EXPIRE,
    ARENA_EMERGENCY,
    ARENA_UNSTICK, 


}

struct Heartbeat{
    string deviceId;
    uint32 sequenceNumber;
};

struct SysName{
    string deviceId;

    string sysName;
};


struct timeValue{
    float seconds;
    long minutes;
};

struct ClockCommand{

    string sysName;

    long isOff;

    long doDisplayTime;

    timeValue time;

    Colors mainColor;

    Colors blueGearColor;

    Colors orangeGearColor;

};

struct ButtonCommand{

    string deviceId;

    Colors buttonState;


};

struct ButtonData{
    string deviceId;

    string sysName;

    long mainPressed;

    long tapoutPressed;
};





struct ArenaCommand{
    string deviceId;

    string sysName;

    Colors  color;

};



struct DeviceInfo{
    @key string deviceId;

    DeviceRole role;

    string sysName;

    string displayName;


};